/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package RewardPrograms;

import Meal.SelectedMealModel;
import Grade.ShowGradeFrame;

import User.SelectedUserModel;
import User.UserModel;
import User.UserPrivilegesModel;
import java.awt.Image;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import Resturantmanagementsystem.MainFrame;
import User.AdminUserControls;

/**
 *
 * @author Alaa_Sayed
 */
public class RewardSettingsFrame extends javax.swing.JFrame {

    /**
     * Creates new form LecturesFrame
     */
    DefaultTableModel model ;
    private String rewardType;
    private String requiredTime;
    private String dateOfReward;
    private String targetedUser;
    private String userType;
    private String creatorName;
    private int isExamedCounter = 0 ;
    private int questions =0 ;
    public RewardSettingsFrame() {
        initComponents();
        setLocationRelativeTo(null);
        setTitle("Restaurant Management System");
        Image img = (new ImageIcon(getClass().getResource("logo2.png"))).getImage();
        setIconImage(img);
        jLabel2.setText("Welcome " + UserModel.getFirstName() + " " + UserModel.getLastName());
        model = (DefaultTableModel) jTable1.getModel();
        
        model.addColumn("Reward Type");
        model.addColumn("Targeted User");
        model.addColumn("Date Of Reward");
        model.addColumn("Required Time");
        model.addColumn("Creator Name");
        
        
        if(UserModel.getType().equalsIgnoreCase("Admin"))
            {
                
                getRewardsForAdminUsers();
            }
            else{
                jButton1.setVisible(false);
                jButton2.setVisible(false);
                jButton3.setVisible(false);
                jLabel6.setVisible(false);
                jLabel7.setVisible(false);
                jLabel8.setVisible(false);
                jComboBox1.setVisible(false);
                jTextField3.setVisible(false);
                jCalendar1.setVisible(false);
                jLabel3.setText("Reward Programs");
                getRewardsForNonAdminUsers();
            }
  
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jTextField3 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton5 = new javax.swing.JButton();
        jComboBox1 = new javax.swing.JComboBox<>();
        jButton4 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jCalendar1 = new com.toedter.calendar.JCalendar();
        jLabel9 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(153, 0, 0));
        jLabel2.setText("jLabel2");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 20, -1, -1));

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel3.setText("Reward Settings");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 120, -1, -1));

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel5.setText("Restaurant Management System");
        getContentPane().add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 20, -1, -1));

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel6.setText("Reward Type");
        getContentPane().add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 180, -1, -1));

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel7.setText("Required Time");
        getContentPane().add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 230, -1, -1));

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel8.setText("Date of Reward");
        getContentPane().add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 280, -1, -1));
        getContentPane().add(jTextField3, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 230, 180, -1));

        jButton1.setBackground(new java.awt.Color(0, 51, 153));
        jButton1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jButton1.setForeground(new java.awt.Color(240, 240, 240));
        jButton1.setText("Update Reward");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 520, -1, -1));

        jButton2.setBackground(new java.awt.Color(0, 51, 153));
        jButton2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jButton2.setForeground(new java.awt.Color(240, 240, 240));
        jButton2.setText("Delete Reward");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 520, -1, -1));

        jButton3.setBackground(new java.awt.Color(0, 51, 153));
        jButton3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jButton3.setForeground(new java.awt.Color(240, 240, 240));
        jButton3.setText("Add Reward");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton3, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 520, -1, -1));

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jTable1MouseReleased(evt);
            }
        });
        jTable1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTable1KeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(592, 131, 490, 520));

        jButton5.setBackground(new java.awt.Color(0, 51, 153));
        jButton5.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jButton5.setForeground(new java.awt.Color(240, 240, 240));
        jButton5.setText("Back");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton5, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 610, -1, -1));

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "-- Select Reward Type --", "Free  Meal", "Physical Rewards", "Money Rewards", "Increment Salary", "Promotion" }));
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });
        getContentPane().add(jComboBox1, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 180, -1, -1));

        jButton4.setBackground(new java.awt.Color(0, 51, 153));
        jButton4.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jButton4.setForeground(new java.awt.Color(240, 240, 240));
        jButton4.setText("Enter Reward Program");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton4, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 570, -1, -1));

        jButton6.setBackground(new java.awt.Color(0, 51, 153));
        jButton6.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jButton6.setForeground(new java.awt.Color(240, 240, 240));
        jButton6.setText("Show Reward");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton6, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 570, -1, -1));
        getContentPane().add(jCalendar1, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 280, -1, -1));

        jLabel9.setIcon(new javax.swing.ImageIcon(getClass().getResource("/RewardPrograms/logo2.png"))); // NOI18N
        getContentPane().add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(980, 10, -1, -1));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/main_background.jpg"))); // NOI18N
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1080, 650));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        if (jTable1.getSelectedRow() != -1) {
            new AdminUserControls().updateReward(jComboBox1.getSelectedItem().toString() , jCalendar1.getDate().toString() , jTextField3.getText(),userType,UserModel.getFirstName() + " " + UserModel.getLastName() , SelectedRewardModel.getRewardType() , SelectedRewardModel.getDateOfReward());
            deleteRows();
            if(UserModel.getType().equalsIgnoreCase("Admin"))
            {
                getRewardsForAdminUsers();
            }
            else{
                getRewardsForNonAdminUsers();
            }
        }
        else{
            JOptionPane.showMessageDialog(null, "Please Select Which Reward from Table....");
            
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jTable1MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseReleased
        // TODO add your handling code here:
        initializeTextFields();
    }//GEN-LAST:event_jTable1MouseReleased

    private void jTable1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTable1KeyReleased
        // TODO add your handling code here:
        initializeTextFields();
    }//GEN-LAST:event_jTable1KeyReleased

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        if (jTable1.getSelectedRow() != -1) {
            new AdminUserControls().deleteReward(SelectedRewardModel.getRewardType() , SelectedRewardModel.getDateOfReward());
            
            deleteRows();
            if(UserModel.getType().equalsIgnoreCase("Admin"))
            {
                getRewardsForAdminUsers();
            }
            else{
                getRewardsForNonAdminUsers();
            }
        }
        else{
            JOptionPane.showMessageDialog(null, "Please Select Which Reward from Table....");
            
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
        dispose();
        new MainFrame().setVisible(true);
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        
        if(!jTextField3.getText().equals(""))
        {
            new AdminUserControls().addReward(jComboBox1.getSelectedItem().toString() , jCalendar1.getDate().toString() , jTextField3.getText(),userType,UserModel.getFirstName() + " " + UserModel.getLastName());
            deleteRows();
            if(UserModel.getType().equalsIgnoreCase("Admin"))
            {
                getRewardsForAdminUsers();
            }
            else{
                getRewardsForNonAdminUsers();
            }
            
        }
        else{
            JOptionPane.showMessageDialog(null, "Please Reward Date and Reward Type is Required , Please Fill it Uniquely");
        }
        
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        if(jTable1.getSelectedRow()!=-1)
        {
            
            if(UserModel.getType().equalsIgnoreCase("Customer") || UserModel.getType().equalsIgnoreCase("Employee"))
            {
                checkIfStudentExamedOrNot();
                if(isExamedCounter == 0)
                {
                    checkIfThereAreQuestions();
                    if(questions == 0)
                    {
                        JOptionPane.showMessageDialog(this, "That Reward Program haven't opened Yet");
                    }
                    else{
                        dispose();
                        new QuestionsFrame().setVisible(true);
                    }
                    
                }
                else{
                    JOptionPane.showMessageDialog(null, "You are not allowed to Enter this right now");
                }
                
            }
            else{
                dispose();
                new RewardQuestionsInitFrame().setVisible(true);
            }
        }
        else{
            JOptionPane.showMessageDialog(null, "Please Select Which Reward Program");
        }
        
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        // TODO add your handling code here:
        
            dispose();
            new ShowGradeFrame().setVisible(true);
       
        
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        // TODO add your handling code here:
        switch(jComboBox1.getSelectedItem().toString())
        {
            case "Free  Meal":
                userType = "Customer";
                SelectedRewardModel.setTargetedUser(userType);
                break;
            case "Physical Rewards":
                userType = "Customer";
                SelectedRewardModel.setTargetedUser(userType);
                break;
            case "Money Rewards":
                userType = "Customer";
                SelectedRewardModel.setTargetedUser(userType);
                break;
            case "Increment Salary":
                userType = "Employee";
                SelectedRewardModel.setTargetedUser(userType);
                break;
            case "Promotion":
                userType = "Employee";
                SelectedRewardModel.setTargetedUser(userType);
                break;
        }
    }//GEN-LAST:event_jComboBox1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(RewardSettingsFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(RewardSettingsFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(RewardSettingsFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(RewardSettingsFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new RewardSettingsFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private com.toedter.calendar.JCalendar jCalendar1;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextField3;
    // End of variables declaration//GEN-END:variables

    private void getRewardsForNonAdminUsers() {
        Connection myConnObj = null;
        Statement myStatObj = null;
        ResultSet myResObj = null;

        String query = "Select * from reward where targeted_user = '"+UserModel.getType()+"'";
        try {
            myConnObj = DriverManager.getConnection("jdbc:mysql://localhost:3306/restaurant_management_system", "root", "1234");
            myStatObj = myConnObj.createStatement();
            myResObj = myStatObj.executeQuery(query);
            while (myResObj.next()) {
                String rewardType = myResObj.getString("reward_type");
                String rewardRequiredTime = myResObj.getString("required_time");
                String rewardDate = myResObj.getString("reward_date");
                String targetedUser = myResObj.getString("targeted_user");
                
                String creatorName = myResObj.getString("creator_name");
                model.addRow(new Object[]{rewardType , targetedUser , rewardDate , rewardRequiredTime , creatorName});
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
    private void getRewardsForAdminUsers() {
        Connection myConnObj = null;
        Statement myStatObj = null;
        ResultSet myResObj = null;

        String query = "Select * from reward ";
        try {
            myConnObj = DriverManager.getConnection("jdbc:mysql://localhost:3306/restaurant_management_system", "root", "1234");
            myStatObj = myConnObj.createStatement();
            myResObj = myStatObj.executeQuery(query);
            while (myResObj.next()) {
                String rewardType = myResObj.getString("reward_type");
                String rewardRequiredTime = myResObj.getString("required_time");
                String rewardDate = myResObj.getString("reward_date");
                String targetedUser = myResObj.getString("targeted_user");
                
                String creatorName = myResObj.getString("creator_name");
                model.addRow(new Object[]{rewardType , targetedUser , rewardDate , rewardRequiredTime , creatorName});
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
    private void deleteRows() {
        int rowCount = model.getRowCount();
        for (int i = rowCount - 1; i >= 0; i--) {
            model.removeRow(i);
        }
    }
    private void initializeTextFields() {
        
    
        int modelRow = jTable1.convertRowIndexToModel(jTable1.getSelectedRow());
        
        rewardType = model.getValueAt(modelRow, 0).toString();
        targetedUser = model.getValueAt(modelRow, 1).toString();
        requiredTime = model.getValueAt(modelRow, 3).toString();
        dateOfReward = model.getValueAt(modelRow, 2).toString();
        creatorName = model.getValueAt(modelRow, 4).toString();
        
       
        jComboBox1.setSelectedItem(rewardType);
        jTextField3.setText(requiredTime);
     
        SelectedRewardModel.setRequriedTime(requiredTime);
        SelectedRewardModel.setDateOfReward(dateOfReward);
        SelectedRewardModel.setRewardType(rewardType);
        
    }

    private void checkIfThereAreQuestions()
    {Connection myConnObj = null;
        Statement myStatObj = null;
        ResultSet myResObj = null;

        String query = "Select * from questions where reward_type ='"+SelectedRewardModel.getRewardType()+"' AND reward_date = '"+SelectedRewardModel.getDateOfReward()+"' ";
        System.out.println(query);
        try {
            myConnObj = DriverManager.getConnection("jdbc:mysql://localhost:3306/restaurant_management_system", "root", "1234");
            myStatObj = myConnObj.createStatement();
            myResObj = myStatObj.executeQuery(query);
            while (myResObj.next()) {
                   questions++;
                       
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        
    }

    private void checkIfStudentExamedOrNot() {
        Connection myConnObj = null;
        Statement myStatObj = null;
        ResultSet myResObj = null;

        String query = "Select * from customer_grades ";
        System.out.println(query);
        try {
            myConnObj = DriverManager.getConnection("jdbc:mysql://localhost:3306/restaurant_management_system", "root", "1234");
            myStatObj = myConnObj.createStatement();
            myResObj = myStatObj.executeQuery(query);
            while (myResObj.next()) {
                   String rewardType = myResObj.getString("reward_type");
                   String rewardDate = myResObj.getString("reward_date");
                   String userName = myResObj.getString("username");
                   String result = myResObj.getString("grade");
                  
                   if(SelectedRewardModel.getRewardType().equalsIgnoreCase(rewardType) && SelectedRewardModel.getDateOfReward().equalsIgnoreCase(rewardDate) && UserModel.getUsername().equalsIgnoreCase(userName))
                   {
                       isExamedCounter++;
                   }
                       
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
}
