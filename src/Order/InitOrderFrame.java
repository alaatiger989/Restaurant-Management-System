/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Order;

import Offers.SelectedOfferModel;
import Resturantmanagementsystem.MainFrame;
import User.AdminUserControls;
import User.EmployeeUserControls;
import User.UserModel;
import java.awt.Image;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.ParseException;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.List;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.RowFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author thegh
 */
public class InitOrderFrame extends javax.swing.JFrame {

    /**
     * Creates new form InitOrderFrame
     */
    private String mealPrice , priceAddition = "10";
    List<CustomerOrderModel> customerData ;
    DefaultTableModel model;
    boolean checked =false;
    Double totalPrice = 0.0 ;
    public InitOrderFrame() {
        initComponents();
        setLocationRelativeTo(null);
        setTitle("Restaurant Management System");
        Image img = (new ImageIcon(getClass().getResource("logo2.png"))).getImage();
        setIconImage(img);
        
        jLabel2.setText("Welcome "+UserModel.getFirstName() + " " + UserModel.getLastName());
        
        
        model = (DefaultTableModel) jTable1.getModel();
        model.addColumn("Menu");
        model.addColumn("Additions");
        model.addColumn("Price");
        model.addColumn("Customer");
        model.addColumn("Date");
        model.addColumn("Creator Name");
        
     
        if(!UserModel.getType().equalsIgnoreCase("Customer"))
        {
            getAvailableMeals();
            getAvailableCustomers();
            getOrdersForNonCustomerUsers();
            jTextField1.setText("" + mealPrice);
            jTextField1.setEnabled(false);
        }
        else{
            jLabel4.setText("Orders For " + UserModel.getFirstName() + " " + UserModel.getLastName());
            jLabel5.setVisible(false);
            jLabel6.setVisible(false);
            jLabel9.setVisible(false);
            jButton4.setVisible(false);
            jButton5.setVisible(false);
            jButton6.setVisible(false);
            
            jComboBox1.setVisible(false);
            jComboBox2.setVisible(false);
            jComboBox3.setVisible(false);
            jComboBox4.setVisible(false);
            jTextField1.setVisible(false);
            getAvailableCustomers();
            getOrdersForCustomerUsers();
            jLabel8.setText("" + totalPrice);
        }
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jComboBox1 = new javax.swing.JComboBox<>();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jComboBox2 = new javax.swing.JComboBox<>();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        jComboBox3 = new javax.swing.JComboBox<>();
        jComboBox4 = new javax.swing.JComboBox<>();
        jButton7 = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(153, 0, 0));
        jLabel2.setText("jLabel2");
        jLabel2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jLabel2MouseReleased(evt);
            }
        });
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 20, -1, -1));

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel3.setText("Restaurant Management System");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 20, -1, -1));

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel4.setText("Menu");
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 100, -1, -1));

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel5.setText("Additions");
        getContentPane().add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 160, -1, -1));

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel6.setText("Customer");
        getContentPane().add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 270, -1, -1));
        getContentPane().add(jTextField1, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 220, 150, -1));

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jTable1MouseReleased(evt);
            }
        });
        jTable1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTable1KeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 110, 780, 370));

        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });
        getContentPane().add(jComboBox1, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 100, 160, -1));

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel7.setText("Total");
        getContentPane().add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(780, 80, -1, -1));

        jLabel8.setText("0");
        getContentPane().add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(880, 80, -1, -1));

        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "-- Select Additions --", "No Additions", "Cheese", "Motzarella", "Ketchup" }));
        jComboBox2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox2ActionPerformed(evt);
            }
        });
        getContentPane().add(jComboBox2, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 160, 150, -1));

        jButton4.setBackground(new java.awt.Color(0, 51, 153));
        jButton4.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jButton4.setForeground(new java.awt.Color(240, 240, 240));
        jButton4.setText("Add Order");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton4, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 340, -1, 30));

        jButton5.setBackground(new java.awt.Color(0, 51, 153));
        jButton5.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jButton5.setForeground(new java.awt.Color(240, 240, 240));
        jButton5.setText("Delete Order");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton5, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 340, 140, 30));

        jButton6.setBackground(new java.awt.Color(0, 51, 153));
        jButton6.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jButton6.setForeground(new java.awt.Color(240, 240, 240));
        jButton6.setText("Update Order");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton6, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 340, 130, 30));

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel9.setText("Price");
        getContentPane().add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 220, -1, -1));

        jComboBox3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox3ActionPerformed(evt);
            }
        });
        getContentPane().add(jComboBox3, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 270, 160, -1));

        jComboBox4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox4ActionPerformed(evt);
            }
        });
        getContentPane().add(jComboBox4, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 80, 160, -1));

        jButton7.setBackground(new java.awt.Color(0, 51, 153));
        jButton7.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jButton7.setForeground(new java.awt.Color(240, 240, 240));
        jButton7.setText("Show Customer Bill");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton7, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 400, -1, 30));

        jButton8.setBackground(new java.awt.Color(0, 51, 153));
        jButton8.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jButton8.setForeground(new java.awt.Color(240, 240, 240));
        jButton8.setText("Back");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton8, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 430, -1, 30));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/main_background.jpg"))); // NOI18N
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1290, 480));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jLabel2MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel2MouseReleased
        // TODO add your handling code here:
        
    }//GEN-LAST:event_jLabel2MouseReleased

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
     
            DateTimeFormatter dtf = DateTimeFormatter.ofPattern("yyyy/MM/dd");  
            LocalDateTime now = LocalDateTime.now();  
            new EmployeeUserControls().addOrder(jComboBox1.getSelectedItem().toString(), jComboBox2.getSelectedItem().toString(), jTextField1.getText() , UserModel.getFirstName() + " " + UserModel.getLastName(), customerData.get(jComboBox3.getSelectedIndex()-1).getUsername() , dtf.format(now));
            
            deleteRows();
            getOrdersForNonCustomerUsers();
            jLabel8.setText("" + totalPrice);
            
        
    }//GEN-LAST:event_jButton4ActionPerformed

    private void deleteRows() {
        int rowCount = model.getRowCount();
        for (int i = rowCount - 1; i >= 0; i--) {
            model.removeRow(i);
        }
    }
    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
      if (jTable1.getSelectedRow() != -1) {
             
            new EmployeeUserControls().deleteOrder(SelectedOrderModel.getDate());
            deleteRows();
            getOrdersForNonCustomerUsers();
        }
        else{
            JOptionPane.showMessageDialog(null, "Please Select Which Order from Table....");
            
        }
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        // TODO add your handling code here:
       if (jTable1.getSelectedRow() != -1) {
           DateTimeFormatter dtf = DateTimeFormatter.ofPattern("yyyy/MM/dd");  
            LocalDateTime now = LocalDateTime.now();  
            new EmployeeUserControls().updateOrder(jComboBox1.getSelectedItem().toString(), jComboBox2.getSelectedItem().toString(), jTextField1.getText() , UserModel.getFirstName() + " " + UserModel.getLastName(), customerData.get(jComboBox3.getSelectedIndex()-1).getUsername() , dtf.format(now) , SelectedOrderModel.getDate());
            deleteRows();
            getOrdersForNonCustomerUsers();
        }
        else{
            JOptionPane.showMessageDialog(null, "Please Select Which Order from Table....");
            
        }
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        // TODO add your handling code here:
        getDataOfSelectedMeal(jComboBox1.getSelectedItem().toString());
        jTextField1.setText(mealPrice);
    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void jComboBox2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox2ActionPerformed
        // TODO add your handling code here:
        switch(jComboBox2.getSelectedItem().toString())
        {
            case "No Additions":
                if(checked == true)
                {
                    mealPrice = String.valueOf(Double.parseDouble(mealPrice) - Double.parseDouble("10"));
                }
                else{
                    mealPrice = String.valueOf(Double.parseDouble(mealPrice) + Double.parseDouble("0"));
                }
                
                break;
            case "Cheese":
                mealPrice = String.valueOf(Double.parseDouble(mealPrice) + Double.parseDouble(priceAddition));
                checked = true;
                break;
                    case "Motzarella":
                        mealPrice = String.valueOf(Double.parseDouble(mealPrice) + Double.parseDouble(priceAddition));
                        checked = true;
                        break;
                            case "Ketchup":
                                mealPrice = String.valueOf(Double.parseDouble(mealPrice) + Double.parseDouble(priceAddition));
                                checked = true;
                                break;
        }
        jTextField1.setText(mealPrice);
        priceAddition = "0";
    }//GEN-LAST:event_jComboBox2ActionPerformed

    private void jComboBox3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox3ActionPerformed
        // TODO add your handling code here:
        getDataOfSelectedCustomer(jComboBox3.getSelectedItem().toString());
    }//GEN-LAST:event_jComboBox3ActionPerformed

    private void jTable1MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseReleased
        // TODO add your handling code here:
       
            // TODO add your handling code here:
            initializeTextFields();
        
    }//GEN-LAST:event_jTable1MouseReleased

    private void jTable1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTable1KeyReleased
        // TODO add your handling code here:
        initializeTextFields();
    }//GEN-LAST:event_jTable1KeyReleased

    private void jComboBox4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox4ActionPerformed
        // TODO add your handling code here:
        System.out.println(jComboBox4.getSelectedItem().toString() + " " + jComboBox4.getSelectedIndex());
        if(jComboBox4.getSelectedItem().toString().equalsIgnoreCase("-- Select From Customers --"))
        {
            filter("" , model , jTable1);   
            jLabel8.setText("0" );
        }
        else{
            getDataOfSelectedCustomer(customerData.get(jComboBox4.getSelectedIndex()-1).getUsername());
            filter(jComboBox4.getSelectedItem().toString() , model , jTable1);
            jLabel8.setText("" + totalPrice);
            
            GiftModel.setCustomerUserName(customerData.get(jComboBox4.getSelectedIndex()-1).getUsername());
            GiftModel.setTotalPrice(totalPrice);
            GiftModel.setCustomerFullName(jComboBox4.getSelectedItem().toString());
            if(totalPrice >=100)
            {
                int dialogButton = JOptionPane.YES_NO_OPTION;
                int dialogResult = JOptionPane.showConfirmDialog (null, "Would You Like to Send Gift to " + jComboBox4.getSelectedItem().toString() + " ? " ,"Warning",dialogButton);
                if(dialogResult == JOptionPane.YES_OPTION){
                  // Saving code here
                  new ChooseGiftFrame().setVisible(true);
                }
            }
        totalPrice = 0.0;
        }
        
    }//GEN-LAST:event_jComboBox4ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        // TODO add your handling code here:
        
        if(!jComboBox4.isVisible())
        {
            BillModel.setCustomerName(UserModel.getFirstName()+" "+UserModel.getLastName());
            BillModel.setCustomerUserName(UserModel.getUsername());
            BillModel.setTotalPrice(jLabel8.getText());
            
            new BillCustomerDateFrame().setVisible(true);
        }
        else{
            if(jComboBox4.getSelectedItem().toString().equalsIgnoreCase("-- Select From Customers --"))
            {
                JOptionPane.showMessageDialog(null, "Please Choose Which Customer From Above Table");
            }
            else
            {
                BillModel.setCustomerName(jComboBox4.getSelectedItem().toString());
                BillModel.setCustomerUserName(""+customerData.get(jComboBox4.getSelectedIndex()-1).getUsername());
                BillModel.setTotalPrice(jLabel8.getText());

                new BillCustomerDateFrame().setVisible(true);
            }
        }
        
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        // TODO add your handling code here:
        dispose();
        new MainFrame().setVisible(true);
    }//GEN-LAST:event_jButton8ActionPerformed

    private void filter(String text, DefaultTableModel model, JTable jTable1) {
        TableRowSorter<DefaultTableModel> tr = new TableRowSorter<DefaultTableModel> (model);
        jTable1.setRowSorter(tr);
        tr.setRowFilter(RowFilter.regexFilter(text));
        
    }
    private void initializeTextFields() {
        
    
        int modelRow = jTable1.convertRowIndexToModel(jTable1.getSelectedRow());
        SelectedOrderModel.setMealName(model.getValueAt(modelRow, 0).toString()); 
        SelectedOrderModel.setAdditions(model.getValueAt(modelRow, 1).toString());
        SelectedOrderModel.setMealPrice(model.getValueAt(modelRow, 2).toString());
        SelectedOrderModel.setCustomer(model.getValueAt(modelRow, 3).toString());
        SelectedOrderModel.setDate(model.getValueAt(modelRow, 4).toString());
        SelectedOrderModel.setCreatorName(model.getValueAt(modelRow, 5).toString());
        
        jComboBox1.setSelectedItem(SelectedOrderModel.getMealName());
        jComboBox2.setSelectedItem(SelectedOrderModel.getAdditions());
        jTextField1.setText(SelectedOrderModel.getMealPrice());
        jComboBox3.setSelectedItem(SelectedOrderModel.getCustomer());
        
        
        
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(InitOrderFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(InitOrderFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(InitOrderFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(InitOrderFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new InitOrderFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JComboBox<String> jComboBox2;
    private javax.swing.JComboBox<String> jComboBox3;
    private javax.swing.JComboBox<String> jComboBox4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables

    private void getAvailableMeals() {
        Connection myConnObj = null;
        Statement myStatObj = null;
        ResultSet myResObj = null;
        jComboBox1.addItem("-- Select From Menu --");
        String query = "Select * from meal";
        try {
            myConnObj = DriverManager.getConnection("jdbc:mysql://localhost:3306/restaurant_management_system", "root", "1234");
            myStatObj = myConnObj.createStatement();
            myResObj = myStatObj.executeQuery(query);
            while (myResObj.next()) {
                
                String meal_name = myResObj.getString("meal_name");
                jComboBox1.addItem(meal_name);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    private void getAvailableCustomers()
    {
        Connection myConnObj = null;
        Statement myStatObj = null;
        ResultSet myResObj = null;
        customerData = new ArrayList<>();
        jComboBox3.addItem("-- Select From Customers --");
        jComboBox4.addItem("-- Select From Customers --");
        String query = "Select * from user where type = 'Customer'";
        try {
            myConnObj = DriverManager.getConnection("jdbc:mysql://localhost:3306/restaurant_management_system", "root", "1234");
            myStatObj = myConnObj.createStatement();
            myResObj = myStatObj.executeQuery(query);
            while (myResObj.next()) {
                
                String firstName = myResObj.getString("first_name");
                String lastName = myResObj.getString("last_name");
                String username = myResObj.getString("username");
                customerData.add(new CustomerOrderModel(username , firstName , lastName));
                
                jComboBox3.addItem(firstName + " " + lastName);
                jComboBox4.addItem(firstName + " " + lastName);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
    private void getDataOfSelectedMeal(String mealName) {
        Connection myConnObj = null;
        Statement myStatObj = null;
        ResultSet myResObj = null;

        String query = "Select * from meal where meal_name = '"+mealName+"'";
        try {
            myConnObj = DriverManager.getConnection("jdbc:mysql://localhost:3306/restaurant_management_system", "root", "1234");
            myStatObj = myConnObj.createStatement();
            myResObj = myStatObj.executeQuery(query);
            while (myResObj.next()) {
                
                String meal_name = myResObj.getString("meal_name");
                String meal_price = myResObj.getString("meal_price");
                mealPrice = meal_price;
               
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    private void getDataOfSelectedCustomer(String customerUserName) {
        Connection myConnObj = null;
        Statement myStatObj = null;
        ResultSet myResObj = null;

        String query = "Select * from `order` where order_customer = '"+customerUserName+"'";
        try {
            myConnObj = DriverManager.getConnection("jdbc:mysql://localhost:3306/restaurant_management_system", "root", "1234");
            myStatObj = myConnObj.createStatement();
            myResObj = myStatObj.executeQuery(query);
            while (myResObj.next()) {
                
                String payments = myResObj.getString("price");
                totalPrice += Double.parseDouble(payments);
               
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    private void getOrdersForNonCustomerUsers() {
        Connection myConnObj = null;
        Statement myStatObj = null;
        ResultSet myResObj = null;
        String employeeName = UserModel.getFirstName()+" " + UserModel.getLastName();
      
        String query = "Select * from `order` where order_maker = '"+employeeName+"'";
        try {
            myConnObj = DriverManager.getConnection("jdbc:mysql://localhost:3306/restaurant_management_system", "root", "1234");
            myStatObj = myConnObj.createStatement();
            myResObj = myStatObj.executeQuery(query);
            while (myResObj.next()) {
                
                String meal_name = myResObj.getString("meal_name");
                String additions = myResObj.getString("additions");
                String price = myResObj.getString("price");
                String customer = myResObj.getString("order_customer");
                String date = myResObj.getString("date");
                String creatorName = myResObj.getString("order_maker");
                
                for(int i = 0 ; i < customerData.size() ; i++)
                {
                    if(customerData.get(i).getUsername().equalsIgnoreCase(customer))
                    {
                        customer = customerData.get(i).getFirstName() + " " + customerData.get(i).getLastName();
                    }
                }
                model.addRow(new Object[]{meal_name, additions,price,customer,date , creatorName});
               
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }    
    }

    private void getOrdersForCustomerUsers() {
        Connection myConnObj = null;
        Statement myStatObj = null;
        ResultSet myResObj = null;
        String employeeName = UserModel.getFirstName()+" " + UserModel.getLastName();
      
        String query = "Select * from `order` where order_customer = '"+UserModel.getUsername()+"'";
        try {
            myConnObj = DriverManager.getConnection("jdbc:mysql://localhost:3306/restaurant_management_system", "root", "1234");
            myStatObj = myConnObj.createStatement();
            myResObj = myStatObj.executeQuery(query);
            while (myResObj.next()) {
                
                String meal_name = myResObj.getString("meal_name");
                String additions = myResObj.getString("additions");
                String price = myResObj.getString("price");
                String customer = myResObj.getString("order_customer");
                String date = myResObj.getString("date");
                String creatorName = myResObj.getString("order_maker");
                
                for(int i = 0 ; i < customerData.size() ; i++)
                {
                    if(customerData.get(i).getUsername().equalsIgnoreCase(customer))
                    {
                        customer = customerData.get(i).getFirstName() + " " + customerData.get(i).getLastName();
                    }
                }
                totalPrice += Double.parseDouble(price);
                model.addRow(new Object[]{meal_name, additions,price,customer,date , creatorName});
               
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }    
    }
}
